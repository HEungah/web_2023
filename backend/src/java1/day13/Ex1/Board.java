package java1.day13.Ex1;

// 클래스 : 설계도 목적
public class Board {
	// ------------객체----------------
	/*
	 	클래스/설계도 -------new-------> 인스턴스/객체
	  							인스턴스화
	 */
	
	
	// 필드 : 객체의 데이터 저장하는 곳
		/*
		 	- 필드 종류
			 	- 인스턴스필드 : 객체 생성시 객체 안에 저장되어 있는 필드
			 	- 정적필드 : static 프로그램 실행시 우선할당, 객체없이 저장되어 있는 필드
		 	
		 	- 접근제한자 : 외부에서 해당 필드를 접근할수 있는 제한/권한
		 		public : 프로젝트내 모든곳
		 		private : 현재 클래스에서만
		 		(default) : 동일한 패키지내에서(기본값, 작성x)
		 		
		 		final : 수정불가
		 			static final : 프로그램 전체에서 상수 만들기
		 			
		 		싱글톤 : 프로그램내 1개만 존재하는 객체
		 			1. 본인 객체 생성(private, static 을 사용함)
		 			2. public static petInstance(){} : 싱글톤 개개체 반환해주는 함수
		 			3. private 생성자() : 외부로부터 생성자 사용 금지
		 */
		
	// 생성자	: 객체 초기화 할때 사용
		/*
		 	객체 선언(생성자 사용)
		 		클래스명 객체변수명 = new 생성자명();
		 		
		 	생성자 선언
		 	- 접근제한자 클래스명(타입 매개변수, 타입 매개변수)(){}	
		 		
		 	생성자 종류[오버로딩 으로 다양하게 작성]	
		 		오버로딩 : 매개변수의 개수, 순서, 타입에 따라서 식별 가능한 것
		 		
		 	생성자 역할
		 		- 1. 객체 생성시 매개변수를 받아서 필드에 저장
		 		- 2. 유효성검사가 필요할때, 계산식이 필요한 값을 필드에 저장할때
		 		
		 	기타 키워드
		 		- this.필드명 : 외부로부터 들어온 매개변수명과 현재 클래스내 필드명과 같을때 필드를 식별
		 		
		 	this	
		 		- this(생략 가능) 현재 클래스의 구성멤버 식별할때 사용
		 */
	
	// 메소드 : 객체의 행동/동작을 정의
		// - 인스턴스 메소드 : 객체 생성시 사용 가능한 메소드
		// - 정적 메소드 : (static) 객체 없이 사용 가능한 메소드
	
	// 메소드 선언
		// 접근제한자 리턴타입 메소드명(타입 매개변수, 타입 매개변수){}
	
	// 리턴타입 : 메소드 종료시 호출했던 곳으로 반환해주는 값의 타입
	// 매개변수 : 메소드 호출시 메소드 안으로 들어오는 변수
	// {} : 메소드 실행 코드
	// return : (void 일때 생략가능) 리턴타입에 맞는 값을 리턴후 메소드 종료
	
	
	// 접근 제한자
		// public, private, default, protected
	
	// 메소드 사용목적
		// 1. 객체간의 상호작용 : 서로 다른 객체간의 데이터 이동
		// 2. 재활용 : 코드 줄이기 / 클린 코딩
		// 3. 매개변수에 따른 서로 다른 실행/결과 반환할 수 있다.
	
	// 외부객체에서 메소드를 호출하는 방법
		// 1. 객체를 이용한 메소드 호출
			// 클래스명 객체변수명 = new 생성자명();
			// 객체변수명.메소드명();
		// 2. 객체없이 정적[static] 메소드 호출
			// 클래스명.메소드명();
		// 3. 싱글톤/객체 내 인스턴스 메소드 호출
			// 클래스명.getInstance().메소드명();
	
	/*
	 	필드 , 생성자, 메소드를 이용한 프로그램 개발
	 	- MVC 디자인 패턴 : 기능 역할에 따른 구분
	 		V : 화면(입출력 담당)
	 			- HTML, JS 언어가 사용되는 자리
	 			- console 역할 - 임시로 대체해서 사용
	 		C : 제어/로직/유효성검사 ... 담당
	 			- 객체를 여러개 가질 필요x (회원가입 기능은 1개만있어도 가능)
	 			- 동일한 메소드를 갖는 객체가 있어도 되지만 굳이 필요없다(싱글톤 권장)
	 		M : 데이터 모델과 실제 데이터
	 			DTO : 데이터 이동 객체 [ 서로 다른 레이어간 이동할때 객체사용 ]
	 				1. 여러개 서로 다른 타입을 이동하면 불편함
	 				- int int String double float   ---> 느림/불편
	 				2. 하나의 객체로 만들어서 이동
	 				- DTO	---> 빠름/편함
	 				
	 				DTO 가독성
	 					member			:	회원객체인데 무슨 역할인지 모름
	 					memberDto	:	회원객체인데 이동객체인지 파악할 수 있음
	 			DAO : 데이터 접근 객체 [ 실제 원본 데이터(DB) 접근 만 ] 
	 */

}













