/*
	
	JS : 객체 지향 언어[ OOP : Object Oriented Programming]
	
		클래스 =	사전적인 정의
		객체	=	실제 존재하는 것 / 토대로 메모리에 할당된 것
			 	세상 모든 형태들을 코드화 = 객체
			 	대량화/자동화 ===> 객체지향 프로그래밍이 적합함
			 	(미리 설계(클래스)하고 컴퓨터는 설계기반으로 형태(객체)생성)
			 	
			 	ex) 현대 소나타
			 		소나타 생성 설계도 = 클래스
			 		공장 생성 => 소나타 생성 설계 기준
			 		A소나타(객체), B소나타(객체)
			 		
			 		붕어빵
			 		붕어빵틀 = 클래스
			 		붕어빵1(객체), 붕어빵2(객체)
			 		
			 		oo아파트
			 		아파트설계도면 = 클래스
			 		우리집(객체), 옆집(객체)
			 		
			 		23년신형 LG냉장고
			 		냉장고설계도 = 클래스
			 		냉장고(객체)
			 		
			 		우리집(객체(냉장고(객체)))
		
		1. 정의 : 세상 존재하는 모든 형태를 코드화
		2. 목적 : 
			1) 형태를 코드화[자동화, 대량화]
			2) 객체특징
				1. 모듈개발(분업화) / 유지보수 편함 / 설계관리 복잡
				2. 다형성(다양한 형태) /호환
				
	
	JS 객체 = JSON
		1. JS 메모리
			1) 변수 = 데이터
			2) 상수 = 데이터
			3) 배열 = [데이터1, 데이터2, 데이터3]
					- 배열 단점 : 서로 다른 정보유형들을 하나의 배열에 관리가 어렵다.
						ex) 유재석/강호동/신동엽 3명의 회원등록(정보 : 아이디, 비밀번호, 이름, 주소 등)등록
							방법1 : 정보유형 분류[ 데이터 유형 식별]
								아이디배열
								비밀번호배열
								이름배열
								주소배열
							방법2 : 인덱스 기준 분류
								회원배열
							방법3 : 객체 사용
								let 회원1 = {아이디 : 'qwe', 비밀번호 : 'qwe', 이름 : '유재석', 주소 : '안산'}		
								let 회원2 = {아이디 : 'ewq', 비밀번호 : 'ewq', 이름 : '강호동', 주소 : '서울'}		
								let 회원3 = {아이디 : 'wqe', 비밀번호 : 'wqe', 이름 : '신동엽', 주소 : '수원'}		
			4) 객체 = {}
				- 사용목적 : 서로 다른 데이터유형(속성/필드) 들을 한곳에 저장/묶음처리		
				- 형태
					let 객체명 = {속성명 : 데이터, 속성명 : 데이터, 속성명 : 데이터}
				- 선언
					키워드 객체명 - {
						속성명 : 데이터,
						속성명2 : 변수,
						속성명3 : 상수,
						속성명4 : 배열,
						속성명5 : 함수,
						속성명6 : 객체 
						}	// 마지막에는 , 생략
			5. 객체 호출
				1) 객체 호출 : 객체명
				2) 객체내 특정 속성 호출 : 객체명.		
					(. => 접근연산자[ 객체내 속성 접근(호출)해서 데이터 호출])
			6. 객체 속성 값 변경
				객체명.속성명 = 새로운데이터
			7. 객체내 속성 추가
				객체명.새로운속성명 = 데이터	
			8. 객체내 속성 삭제
				delete 객체명.속성명
			9. 여러개 객체 => 관리(배열/리스트 이용)
				회원객체1, 1번게시물객체, 회원객체2, 2번게시물객체
				let 회원객체배열 = [회원객체1, 회원객체2];
				let 게시물객체배열 = [1번게시물객체, 2번게시물객체]	
	
*/

// 1. 객체 선언
let 객체1 = { 아이디 : 'qwe', 비밀번호 : '123', 이름 : '유재석'}

// 2. 객체 호출
console.log(객체1)		// 객체1의 모든 정보 호출
console.log('아이디속성 호출 : ' + 객체1.아이디)	// 객체1의 특정(아이디) 속성 호출
console.log('비밀번호속성 호출 : ' +  객체1.비밀번호)	// 객체내  속성 알고 있으면 데이터 호출 가능
console.log(console)
	// console : 내장객체 -> console객체에서 log()함수 호출
	// document : 내장객체 -> document객체에서 qeuerySeletor() 함수 호출
			
// 3. 객체의 속성내 데이터 변경
객체1.비밀번호 = '123456'	// 객체내 비밀번호 속성 호출해서 새로운 데이터 대입

// 4. 객체내 속성 추가
객체1.주소 = '안산';		// 객체내 주소 속성이 없으므로 호출이 아닌 추가되서 값 대입
console.log(객체1);

// 5. 객체내 속성 삭제
delete 객체1.주소;			// 객체내 속성이 삭제되며 데이터도 같이 삭제된다.
console.log(객체1);

// 6. 여러개의 동일한 유형의 객체를 하나의 배열 저장
let 객체2 = { 아이디 : 'qwe', 비밀번호 : '123', 이름 : '강호동'};
let 객체3 = { 아이디 : 'qwe', 비밀번호 : '123', 이름 : '신동엽'};

let 회원객체배열 =[객체1, 객체2, 객체3];
console.log(회원객체배열);

// !!!!!! : JSON ------------> (웹/앱 관련)언어들 간의 데이터 구조 형태














